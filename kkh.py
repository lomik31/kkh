import websocket, re
import json as JSON
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from threading import Thread
bot = TeleBot("1609358198:AAHs5roy9uMih-5fTlvzHKgLlfkdQXm-LPk")
class CONNECTION:
    id = 0
    sendIds = {}
    CLIENT = "telegram"
    def receiver(self, ws, json):
        json = JSON.loads(json)
        print(json)
        self.json = json
        if (json.get("id")):
            cdata = self.sendIds.get(json["id"])
            if (cdata == None): raise KeyError("–ü—Ä–∏—à–µ–¥—à–∏–π id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º")
            if (not json.get("success")):
                msg = json.get("message")
                if (msg): bot.send_message(cdata["chatId"], msg)
                del self.sendIds[json["id"]]
                return
            f = self.sendIds.get(json["id"])["callback"]
            if (f):
                data = []
                if (json.get("data") != None):
                    if (type(json["data"]) == list):
                        data += json["data"]
                    else: data.append(json["data"])
                if (cdata.get("buffer")): data += cdata["buffer"]
                if data != []: f(cdata["chatId"], *data)
                else: f(cdata["chatId"])
            del self.sendIds[json["id"]]
        elif (json.get("action") == "sendMessage" and json.get("data")):
            chatId = json["data"].get("chatId")
            text = json["data"].get("text")
            if (chatId and text):
                try: bot.send_message(chatId, text)
                except: pass
        else: print(json)
    def on_close(self, ws, close_status_code, close_msg):
        print("### closed ###\ncode: {}, message: {}".format(close_status_code, close_msg))
    def on_error(self, ws, error):
        print("error: ", error)
        if (not error): bot.send_message(self.sendIds.get(self.json["id"])["chatId"], "noerr") #TODO
    def on_open(self, ws):
        print("Opened connection")
    def send(self, data, chatId, callback = None, buffer:list = None):
        self.id += 1
        self.sendIds[self.id] = {"chatId":chatId, "callback": callback, "buffer": buffer}
        data["id"] = self.id
        self.sendData(data)
    def sendData(self, data):
        ws.send(JSON.dumps(data))
connection = CONNECTION()

@bot.message_handler(commands=["start"])
def start_command(message):
    chatData = bot.get_chat(message.chat.id)
    def callback(chatId, value):
        if (value):
            if (chatData.type == "private"): bot.send_message(chatId, "–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –±–æ—Ç-–∫–ª–∏–∫–µ—Ä.\n–°–¥–µ–ª–∞–ª–∏: [@lomik31](tg://user?id=357694314), [@Discord Nitra MV](tg://user?id=1160222752).\n–ï—Å–ª–∏ —Ç—ã –ò–≥–æ—Ä—å–∫–∞—Ä—Ç–æ—à–∫–∞ –∏–ª–∏ –î–µ–Ω–∏—Å–∏–∑—é–º, —Ç–æ —Ç–µ–±–µ [—Å—é–¥–∞](https://docs.google.com/document/d/15a6S5F26kxRn103Yboknpogu-tJtIoxin2G9tBjY65A).\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∏–º.\n[–ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ –∏ —Ç–æ, —á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ](https://trello.com/b/kfVkY65h/%D0%BA%D0%BA%D1%88)\n–ù–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: [@kkh_news] (t.me/kkh_news)\n–î–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ `–∫–æ–º–∞–Ω–¥—ã`.\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥, –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ `–ø—Ä–æ–º–æ <–∫–æ–¥>`\n–ù–∞—à–∞ –±–µ—Å–µ–¥–∞: [—Ç—ã–∫](t.me/+_VgA7r0PfWZiMGFi)\n\n*–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ* [@lomik31](tg://user?id=357694314)", "MARKDOWN")
            else: bot.send_message(chatId, "–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!")
            return
        if (chatData.type == "private"): connection.send({"action": {"function": "append.appendId", "args": [chatData.type, message.chat.id, chatData.first_name, chatData.last_name]}}, chatId)
        else: connection.send({"action": {"function": "append.appendId", "args": [chatData.type, message.chat.id]}}, chatId)
        bot.send_message(chatId, "–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –±–æ—Ç-–∫–ª–∏–∫–µ—Ä.\n–°–¥–µ–ª–∞–ª–∏: [@lomik31](tg://user?id=357694314), [@Discord Nitra MV](tg://user?id=1160222752).\n–ï—Å–ª–∏ —Ç—ã –ò–≥–æ—Ä—å–∫–∞—Ä—Ç–æ—à–∫–∞ –∏–ª–∏ –î–µ–Ω–∏—Å–∏–∑—é–º, —Ç–æ —Ç–µ–±–µ [—Å—é–¥–∞](https://docs.google.com/document/d/15a6S5F26kxRn103Yboknpogu-tJtIoxin2G9tBjY65A).\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∏–º.\n[–ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ –∏ —Ç–æ, —á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ](https://trello.com/b/kfVkY65h/%D0%BA%D0%BA%D1%88)\n–ù–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: [@kkh_news] (t.me/kkh_news)\n–î–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ `–∫–æ–º–∞–Ω–¥—ã`.\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥, –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ `–ø—Ä–æ–º–æ <–∫–æ–¥>`\n–ù–∞—à–∞ –±–µ—Å–µ–¥–∞: [—Ç—ã–∫](t.me/+_VgA7r0PfWZiMGFi)\n\n*–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ* [@lomik31](tg://user?id=357694314)", "MARKDOWN", reply_markup=Keyboards.mainMenu(), disable_web_page_preview=True)
    connection.send({"action": {"function": "get.id", "args": [message.chat.id, chatData.type]}}, message.chat.id, callback)

@bot.message_handler(content_types=["text"])
def text(message):
    message_text = message.text.lower().split(" ")
    if (message_text[0] == "–∫–º–¥"):
        def callback(chatId, value):
            if (not value): return
            if (len(message_text) < 3): return bot.send_message(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–º–¥ <id> <–∫–æ–º–∞–Ω–¥–∞>")
            if (message_text[1] == "_" and message.reply_to_message): userId = message.reply_to_message.from_user.id
            else: userId = message_text[1]
            def callback(chatId, value):
                if (not value): return bot.send_message(chatId, "Id –Ω–µ –Ω–∞–π–¥–µ–Ω")
                if message_text[2] == "–∫–º–¥": return bot.send_message(message.chat.id, "—ç, —Ç–∞–∫ –Ω–µ–ª—å–∑—è, –±–∞–Ω")
                def callback(chatId, value):
                    if (value and message.from_user.id != 357694314): return bot.send_message(message.chat.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–º–¥ –¥–ª—è —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞!")
                    kmd(message, message_text)
                    message.from_user.id = userId
                    a = message.text.split(" ")[2:]
                    message.text = ""
                    b = 0
                    for i in a:
                        b = len(a) - 1
                        if b == 0:
                            message.text += i
                        else:
                            message.text += f"{i} "
                    text(message)
                connection.send({"action": {"function": "get.get", "args": [userId, "isAdmin"]}}, chatId, callback)
            connection.send({"action": {"function": "get.id", "args": userId}}, chatId, callback)
        connection.send({"action": {"function": "get.get", "args": [message.from_user.id, "isAdmin"]}}, message.chat.id, callback)
    elif (message_text[0] == "_"):
        def callback(chatId, command):
            if command == "": bot.send_message(message.chat.id, "–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            else:
                message.text = command
                text(message)
        connection.send({"action": {"function": "get.get", "args": [message.from_user.id, "lastCommand"]}}, message.chat.id, callback)
    elif (message_text[0] in ["—Ç–æ–ø", "–≤—Å–µ—Ç–æ–ø"]): kmd(message, message_text).top()
    elif (message_text[0] == "–±—ç–∫–∞–ø"): kmd(message, message_text).backup()
    elif (message_text[0] in ["–∫–ª–∏–∫", "üîÆ"]): kmd(message, message_text).click()
    elif (message_text[0] in ["–±–∞–ª–∞–Ω—Å", "–±"]): kmd(message, message_text).balance()
    elif (message_text[0] in ["–±–¥–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å—å–±–¥"]): kmd(message, message_text).writeDB()
    elif (message_text[0] == "—Ü–µ–Ω–∞"): kmd(message, message_text).price()
    elif (message_text[0] == "set"): kmd(message, message_text).set()
    elif (message_text[0] in ["–º–æ–Ω–µ—Ç–∞", "–º–æ–Ω–µ—Ç–∫–∞"]): kmd(message, message_text).coin()
    elif (message_text[0] == "—Å–±—Ä–æ—Å"): kmd(message, message_text).reset()
    elif (message_text[0] == "–ø–µ—Ä–µ–≤–æ–¥"): kmd(message, message_text).pay()
    elif (message_text[0] == "–±–æ–Ω—É—Å"): kmd(message, message_text).bonus()
    elif (message_text[0] == "–±–æ–Ω—É—Å2"): kmd(message, message_text).bonus2()
    elif (message_text[0].startswith("+") and message_text[0][1:] != "–±–∞–Ω–∫"):
        loxtext = message.text
        message.text = re.sub(r" \(\d+[\.\d]* –ö–®\)", "", message.text)[1:]
        message_text = message.text.lower().split(" ")
        t = message_text[0]
        for i in range(0, len(message_text)):
            if (t in ["—Å–µ–∫", "–∫–ª–∏–∫", "—Å–∫–∏–¥–∫–∞", "1% —Å–∫–∏–¥–∫–∏", "–±–±", "–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å/–¥–µ–Ω—å", "–±—É—Å—Ç –±–∞–ª–∞–Ω—Å–∞", "–±—É—Å—Ç –±–∞–ª–∞–Ω—Å", "1% –±–∞–ª–∞–Ω—Å–∞/–¥–µ–Ω—å"]): return kmd(message, message_text, loxtext).buyBoost(t)
            t += f" {message_text[i+1]}"
        return bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–ø–≥—Ä–µ–π–¥–∞")
    elif (message_text[0] == "–∞–ø–≥—Ä–µ–π–¥—ã"): kmd(message, message_text).upgrades()
    # elif (message_text[0] == "test"): bot.send_message(message.chat.id, "lox", reply_markup=ReplyKeyboardRemove()) –í–ù–ò–ú–ê–ù–ò–ï –ë–õ–Ø–¢–¨
    elif (message_text[0] == "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"): kmd(message, message_text).keyboardSet()
    elif (message_text[0] in ["–Ω–∞–∑–∞–¥", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]): kmd(message, message_text).backKeyboardMenu()
    elif (message_text[0] in ["–ø–æ—Å–ª–∞—Ç—å", "–ø–æ—Å–ª–∞—Ç—å–∞–Ω–æ–Ω"]): kmd(message, message_text).sendUser()
    elif (message_text[0] in ["+–±–∞–Ω–∫", "-–±–∞–Ω–∫", "–±–∞–Ω–∫"]): kmd(message, message_text).bankTransfer()
    elif (message_text[0] == "—Ä–∞—Å—Å—ã–ª–∫–∞"): kmd(message, message_text).mailing()
    elif (message_text[0] == "–ª–ø—Ä–æ–º–æ"): kmd(message, message_text).promoList()
    elif (message_text[0] == "–∏–ø—Ä–æ–º–æ"): kmd(message, message_text).promoInfo()
    elif (message_text[0] == "—Ñ–∏–ø—Ä–æ–º–æ"): kmd(message, message_text).promoFullInfo()
    elif (message_text[0] == "–¥–ø—Ä–æ–º–æ"): kmd(message, message_text).promoDelete()
    elif (message_text[0] == "–Ω–ø—Ä–æ–º–æ"): kmd(message, message_text).promoAdd()
    elif (message_text[0] == "–ø—Ä–æ–º–æ"): kmd(message, message_text).promoActivate()
    elif (message_text[0] == "–∏–Ω—Ñ–æ"): kmd(message, message_text).getUserInfo()
    elif (message_text[0] == "–∞–¥–º–∏–Ω"): kmd(message, message_text).admin()
    elif (message_text[0] == "–¥—é–∑–µ—Ä"): kmd(message, message_text).removeId()
    elif (message_text[0] == "—é–∑–µ—Ä—Å–ª–∏—Å—Ç"): kmd(message, message_text).userslist()
    elif (message_text[0] == "–±–∏—Ç"): kmd(message, message_text).btcBet()
    elif (message_text[0] == "–∫–æ–º–∞–Ω–¥—ã"): kmd(message, message_text).commandsList()

class kmd:
    def __init__(self, message, message_text, customCommand = None):
        self.message = message
        self.message_text = message_text
        def callback(chatId, value):
            if (not value): return bot.send_message(chatId, "–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É *–≤ –õ–°* –∫–æ–º–∞–Ω–¥—É /start!", parse_mode="MARKDOWN")
            if (customCommand): command = customCommand
            else: command = message.text
            connection.send({"action": {"function": "set.lastCommand", "args": [self.message.from_user.id, command]}}, chatId)
        connection.send({"action": {"function": "get.id", "args": self.message.from_user.id}}, self.message.chat.id, callback)
    def top(self):
        top = {"page": 1, "mode": "balance", "activeMode": True, "id": self.message.from_user.id}
        if (self.message_text[0] == "–≤—Å–µ—Ç–æ–ø"): top["activeMode"] = False
        if (len(self.message_text) >= 2):
            if (self.message_text[1] in ["–∫–ª–∏–∫", "–∫", "click"]): top["mode"] = "click"
            elif (self.message_text[1] in ["—Å–µ–∫", "—Å", "sec"]): top ["mode"] = "sec"
            elif (self.message_text[1] in ["–±–±", "–±—É—Å—Ç–±–∞–ª–∞–Ω—Å–∞", "bb", "balanceboost", "–±–∞–ª–∞–Ω—Å–±—É—Å—Ç", "balanceBoost"]): top["mode"] = "balanceBoost"
            elif (self.message_text[1] == "–±—É—Å—Ç" and len(self.message_text) >= 3 and self.message_text[2] in ["–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å–∞"]):
                top["mode"] = "balanceBoost"
                self.message_text.pop(2)
            elif (self.message_text[1] in ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "—Ä", "—Ä–µ–≥", "register", "registerTime"]): top["mode"] = "registerTime"
            elif (self.message_text[1] in ["–±–∞–Ω–∫", "bank"]): top["mode"] = "bank"
            elif (self.message_text[1] in ["–¥", "–¥–µ–Ω—å–≥–∏", "money"]): top["mode"] = "money"
            if (len(self.message_text) >= 3):
                try:
                    top["page"] = int(self.message_text[2])
                except: pass
        def callback(chatId, msg):
            bot.send_message(chatId, msg, parse_mode="HTML")
        connection.send({"action": {"function": "kmd.leaderboard", "args": [top['mode'], top['activeMode'], top['id'], top['page']]}}, self.message.chat.id, callback)
    def backup(self):
        if (len(self.message_text) < 2): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –±—ç–∫–∞–ø <—Å–æ–∑–¥–∞—Ç—å>\n–°–æ–∑–¥–∞—ë—Ç –±—ç–∫–∞–ø –≤ –ø–∞–ø–∫—É —Å –±–µ–∫–∞–ø–∞–º–∏ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ –æ–±–ª–∞–∫–æ.")
        if (self.message_text[1] == "—Å–æ–∑–¥–∞—Ç—å"):
            def callback(chatId, message):
                bot.send_message(chatId, message)
            connection.send({"action": {"function": "backup"}}, self.message.chat.id, callback)
        else: bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –±—ç–∫–∞–ø <—Å–æ–∑–¥–∞—Ç—å>")
    def click(self):
        def callback(chatId, message):
            bot.send_message(chatId, message)
        connection.send({"action": {"function": "kmd.click", "args": self.message.from_user.id}}, self.message.chat.id, callback)
    def balance(self):
        user = self.message.from_user.id
        if (len(self.message_text) > 1): 
            if (self.message_text[1] == "_" and self.message.reply_to_message): user = self.message.reply_to_message.from_user.id
            else: user = self.message_text[1]
        def callback(chatId, message):
            bot.send_message(chatId, message, parse_mode="MARKDOWN")
        connection.send({"action": {"function": "kmd.balance", "args": user}}, self.message.chat.id, callback)
    def writeDB(self):
        def callback(chatId, msg):
            bot.send_message(chatId, msg)
        connection.send({"action": {"function": "dbWrite"}}, self.message.chat.id, callback)
    def price(self):
        if (len(self.message_text) < 2): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ü–µ–Ω–∞ <–∞–ø–≥—Ä–µ–π–¥>")
        upgrade = self.message.text[5:].replace("+", "")
        if (upgrade == "–∫–ª–∏–∫"): upgrade = "click"
        elif (upgrade == "—Å–µ–∫"): upgrade = "sec"
        elif (upgrade in ["—Å–∫–∏–¥–∫–∞", "—Å–∫–∏–¥–∫–∏"]): upgrade = "sale"
        elif (upgrade in ["–±–±", "–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å–∞", "–±–∞–ª–∞–Ω—Å/–¥–µ–Ω—å"]): upgrade = "balanceBoost"
        if (upgrade not in ["click", "sec", "sale", "balanceBoost"]): return bot.send_message(self.message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–ø–≥—Ä–µ–π–¥")
        def callback(chatId, message):
            bot.send_message(chatId, message)
        connection.send({"action": {"function": "calc.boost", "args": [self.message.from_user.id, upgrade]}}, self.message.chat.id, callback)
    def set(self):
        if (len(self.message_text) < 4): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: set <id> <–ø–∞—Ä–∞–º–µ—Ç—Ä> <–∑–Ω–∞—á–µ–Ω–∏–µ>")
        amount = self.message_text[3]
        user = self.message_text[1]
        if (self.message_text[1] == "_" and self.message.reply_to_message): user = self.message.reply_to_message.from_user.id
        if (amount == "true"): amount = True
        elif (amount == "false"): amount = False
        connection.send({"action": {"function": "kmd.set", "args": [self.message.from_user.id, user, self.message.text.split(" ")[2], amount]}}, self.message.chat.id, lambda chatId, message: bot.send_message(chatId, message))
    def coin(self):
        if (len(self.message_text) < 3): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –º–æ–Ω–µ—Ç–∞ <—Å—Ç–∞–≤–∫–∞> –æ—Ä–µ–ª/—Ä–µ—à–∫–∞")
        bet = self.message_text[1]
        side = self.message_text[2]
        def callback(chatId, message):
            bot.send_message(chatId, message)
        connection.send({"action": {"function": "game.coin", "args": [self.message.from_user.id, bet, side]}}, self.message.chat.id, callback)
    def reset(self):
        def callback(chatId, message):
            bot.send_message(chatId, message, parse_mode="MARKDOWN")
        if (len(self.message_text) == 1): connection.send({"action": {"function": "kmd.resetMessage"}}, self.message.chat.id, callback)
        elif (len(self.message_text) > 1):
            if (self.message_text[1] == "—Å–ø—Ä–∞–≤–∫–∞"): connection.send({"action": {"function": "kmd.resetMessage"}}, self.message.chat.id, callback)
            elif (self.message_text[1] == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"): connection.send({"action": {"function": "resetId", "args": [self.message.from_user.id, 1]}}, self.message.chat.id, lambda chatId: bot.send_message(chatId, "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!"))
            else:
                def callback(chatId, state):
                    if (not state): return bot.send_message(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Å–±—Ä–æ—Å <–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/—Å–ø—Ä–∞–≤–∫–∞>")
                    user = self.message_text[1]
                    def callback(chatId):
                        def callback(chatId, name):
                            bot.send_message(chatId, f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} (`{user}`) —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!", parse_mode="MARKDOWN")
                            try: bot.send_message(user, "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
                            except: pass
                        connection.send({"action": {"function": "get.get", "args": [user, "fullName"]}}, self.message.chat.id, callback)
                    connection.send({"action": {"function": "resetId", "args": [user, 2]}}, self.message.chat.id, callback)
                connection.send({"action": {"function": "get.get", "args": [self.message.from_user.id, "isAdmin"]}}, self.message.chat.id, callback)
    def pay(self):
        if (len(self.message_text) < 3): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ø–µ—Ä–µ–≤–æ–¥ <—Å—É–º–º–∞> <id –ø–æ–ª—É—á–∞—Ç–µ–ª—è> [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")
        fr0m = self.message.from_user.id
        to = self.message_text[2]
        amount = self.message_text[1]
        comment = ""
        if (len(self.message_text) > 3):
            for i in self.message.text.split(" ")[3:]:
                comment += i
        if (to == "_" and self.message.reply_to_message): to = self.message.reply_to_message.from_user.id
        def callback(chatId, message):
            bot.send_message(chatId, message)
        if (comment): connection.send({"action": {"function": "kmd.pay", "args": [fr0m, to, amount, comment]}}, self.message.chat.id, callback)
        else: connection.send({"action": {"function": "kmd.pay", "args": [fr0m, to, amount]}}, self.message.chat.id, callback)
    def bonus(self):
        def callback(chatId, message):
            bot.send_message(chatId, message)
        connection.send({"action": {"function": "give.bonus", "args": [self.message.from_user.id]}}, self.message.chat.id, callback)
    def bonus2(self):
        def callback(chatId, message):
            bot.send_message(chatId, message)
        connection.send({"action": {"function": "give.bonus2", "args": [self.message.from_user.id]}}, self.message.chat.id, callback)
    def buyBoost(self, boost: str):
        args = [i for i in self.message_text if i not in boost.split(" ")]
        if (boost == "–∫–ª–∏–∫"): boost = "click"
        elif (boost == "—Å–µ–∫"): boost = "sec"
        elif (boost in ["—Å–∫–∏–¥–∫–∞", "1% —Å–∫–∏–¥–∫–∏"]): boost = "sale"
        elif (boost in ["–±–±", "–±–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å/–¥–µ–Ω—å", "–±—É—Å—Ç –±–∞–ª–∞–Ω—Å–∞", "–±—É—Å—Ç –±–∞–ª–∞–Ω—Å", "1% –±–∞–ª–∞–Ω—Å–∞/–¥–µ–Ω—å"]): boost = "balanceBoost"
        def callback(chatId, message):
            def callback(chatId, value):
                if (not value): return bot.send_message(chatId, message, parse_mode="HTML")
                def callback(chatId, sec, click, sale, balanceBoost):
                    bot.send_message(chatId, message, reply_markup=Keyboards.upgrade(sec, click, sale, balanceBoost), parse_mode="HTML")
                connection.send({"action": {"function": "get.keyboardCosts", "args": self.message.from_user.id}}, chatId, callback)
            connection.send({"action": {"function": "get.keyboard", "args": [self.message.chat.id, "activeKeyboard", bot.get_chat(chatId).type]}}, chatId, callback)
        count = 1
        if (len(args) > 0):
            if (args[0] in ["–≤—Å–µ", "–≤—Å—ë"]): count = -1
            else: count = args[0]
            return connection.send({"action": {"function": "kmd.buyBoost", "args": [self.message.from_user.id, boost, count]}}, self.message.chat.id, callback)
        connection.send({"action": {"function": "kmd.buyBoost", "args": [self.message.from_user.id, boost]}}, self.message.chat.id, callback)
    def upgrades(self):
        type = bot.get_chat(self.message.chat.id).type
        def callback(chatId, value):
            if (not value): return bot.send_message(chatId, "–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –∞–ø–≥—Ä–µ–π–¥–æ–≤")
            def callback(chatId, sec, click, sale, balanceBoost):
                connection.send({"action": {"function": "set.keyboard.active", "args": [self.message.chat.id, type, True]}}, self.message.chat.id)
                bot.send_message(chatId, "–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –∞–ø–≥—Ä–µ–π–¥–æ–≤", reply_markup=Keyboards.upgrade(sec, click, sale, balanceBoost), parse_mode="HTML")
            connection.send({"action": {"function": "get.keyboardCosts", "args": self.message.from_user.id}}, chatId, callback)
        connection.send({"action": {"function": "get.keyboard", "args": [self.message.chat.id, "keyboard", type]}}, self.message.chat.id, callback)
    def keyboardSet(self):
        if (len(self.message_text) < 2 or self.message_text[1] not in ["–¥–∞", "–Ω–µ—Ç"]): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ <–¥–∞/–Ω–µ—Ç>")
        if (self.message_text[1] == "–¥–∞"): state = True
        elif (self.message_text[1] == "–Ω–µ—Ç"): state = False
        type = bot.get_chat(self.message.chat.id).type
        def callback(chatId):
            if (state): bot.send_message(chatId, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞", reply_markup=Keyboards.mainMenu())
            else: 
                connection.send({"action": {"function": "set.keyboard.active", "args": [self.message.chat.id, type, False]}}, self.message.chat.id)
                bot.send_message(chatId, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
        connection.send({"action": {"function": "set.keyboard.passive", "args": [self.message.chat.id, type, state]}}, self.message.chat.id, callback)
    def backKeyboardMenu(self):
        type = bot.get_chat(self.message.chat.id).type
        def callback(chatId, value):
            if (value):
                connection.send({"action": {"function": "set.keyboard.active", "args": [chatId, type, False]}}, chatId)
                bot.send_message(chatId, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é", reply_markup=Keyboards.mainMenu())
            else: bot.send_message(chatId, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é")
        connection.send({"action": {"function": "get.keyboard", "args": [self.message.chat.id, "activeKeyboard", type]}}, self.message.chat.id, callback)
    def sendUser(self):
        if (len(self.message_text) < 2): return bot.send_message(self.message.chat.id, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {self.message_text[0]} <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        if (self.message_text[1] == "_" and self.message.reply_to_message): user = self.message.reply_to_message.from_user.id
        else: user = self.message_text[1]
        if (self.message_text[0] == "–ø–æ—Å–ª–∞—Ç—å"): type = "normal"
        elif (self.message_text[0] == "–ø–æ—Å–ª–∞—Ç—å–∞–Ω–æ–Ω"): type = "anonymous"
        def callback(chatId, message):
            bot.send_message(chatId, message)
        connection.send({"action": {"function": "kmd.sendUser", "args": [self.message.from_user.id, user, type]}}, self.message.chat.id, callback)
    def bankTransfer(self):
        if (self.message_text[0] == "+–±–∞–Ω–∫"): action = "put"
        elif (self.message_text[0] == "-–±–∞–Ω–∫"): action = "take"
        elif (self.message_text[0] == "–±–∞–Ω–∫"): return bot.send_message(self.message.chat.id, "helpMessage")
        def callback(chatId, message):
            bot.send_message(chatId, message)
        if (len(self.message_text) > 1):
            value = self.message_text[1]
            return connection.send({"action": {"function": "kmd.bankTransfer", "args": [self.message.from_user.id, action, value]}}, self.message.chat.id, callback)
        connection.send({"action": {"function": "kmd.bankTransfer", "args": [self.message.from_user.id, action]}}, self.message.chat.id, callback)
    def mailing(self):
        if (len(self.message_text) < 2): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ä–∞—Å—Å—ã–ª–∫–∞ <–¥–∞/–Ω–µ—Ç>")
        state = None
        if (self.message_text[1] == "–¥–∞"): state = True
        elif (self.message_text[1] == "–Ω–µ—Ç"): state = False
        if (state != None):
            def callback(chatId):
                if (state): bot.send_message(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.\n–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ—Ç")
                else: bot.send_message(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–∞")
            return connection.send({"action": {"function": "set.set", "args": [self.message.from_user.id, "mails", state]}}, self.message.chat.id, callback)
        if (self.message_text[1] == "—Å–æ–∑–¥–∞—Ç—å"):
            def callback(chatId, value):
                if (not value): return
                if (len(self.message_text) < 3): return bot.send_message(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞—Ç—å <—Ç–µ–∫—Å—Ç>")
                text = self.message.text.split(" ", 2)[-1]
                connection.send({"action": {"function": "kmd.mailingSend", "args": text}}, self.message.chat.id)
            return connection.send({"action": {"function": "get.get", "args": [self.message.from_user.id, "isAdmin"]}}, self.message.chat.id, callback)
        bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ä–∞—Å—Å—ã–ª–∫–∞ <–¥–∞/–Ω–µ—Ç>")
    def promoList(self):
        def callback(chatId, message):
            bot.send_message(chatId, message)
        connection.send({"action": {"function": "promo.list"}}, self.message.chat.id, callback)
    def promoInfo(self):
        if (len(self.message_text) < 2): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∏–ø—Ä–æ–º–æ <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞>")
        promo = self.message.text.split(" ", 1)[-1]
        def callback(chatId, message):
            bot.send_message(chatId, message)
        connection.send({"action": {"function": "promo.info", "args": promo}}, self.message.chat.id, callback)
    def promoFullInfo(self):
        def callback(chatId, value):
            if (not value): return
            if (len(self.message_text) < 2): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ñ–∏–ø—Ä–æ–º–æ <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞>")
            promo = self.message.text.split(" ", 1)[-1]
            def callback(chatId, message):
                bot.send_message(chatId, message)
            connection.send({"action": {"function": "promo.fInfo", "args": promo}}, self.message.chat.id, callback)
        connection.send({"action": {"function": "get.get", "args": [self.message.from_user.id, "isAdmin"]}}, self.message.chat.id, callback)
    def promoDelete(self):
        def callback(chatId, value):
            if (not value): return
            promo = self.message.text.split(" ", 1)[-1]
            def callback(chatId):
                bot.send_message(chatId, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω")
            connection.send({"action": {"function": "promo.delete", "args": promo}}, self.message.chat.id, callback)
        connection.send({"action": {"function": "get.get", "args": [self.message.from_user.id, "isAdmin"]}}, self.message.chat.id, callback)
    def promoAdd(self):
        def callback(chatId, value):
            if (not value): return
            if (len(self.message_text) < 5): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –Ω–ø—Ä–æ–º–æ <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–ø–∞—Ä–∞–º–µ—Ç—Ä—ã({'balance':0, 'click':0, 'sec':0, 'sale':0, 'multiplier':0, 'balanceBoost':0})> <–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π> <–≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è>")
            a = self.message.text.partition('{')
            b = a[2].partition('}')
            c = b[2][1:]
            paramsDictSTR = a[1] + b[0]+ b[1]
            try: paramsDict = JSON.loads(paramsDictSTR.replace("'",'"'))
            except Exception as e: return bot.send_message(self.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!\n{e}")
            connection.send({"action": {"function": "promo.add", "args": [self.message_text[1], paramsDict, int(c.split(" ")[0]), c.split(" ")[1]]}}, chatId, lambda chatId: bot.send_message(chatId, "–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"))
        connection.send({"action": {"function": "get.get", "args": [self.message.from_user.id, "isAdmin"]}}, self.message.chat.id, callback)
    def promoActivate(self):
        if len(self.message_text) < 2: return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ø—Ä–æ–º–æ <–∫–æ–¥>")
        connection.send({"action": {"function": "promo.activate", "args": [connection.CLIENT, self.message.chat.id, self.message.from_user.id, self.message.text.split(" ", 1)[-1]]}}, self.message.chat.id, lambda chatId, message: bot.send_message(chatId, message))
    def getUserInfo(self):
        def callback(chatId, value):
            if (not value): return
            if (len(self.message_text) < 2): userId = self.message.from_user.id
            elif (self.message_text[1] == "_" and self.message.reply_to_message): userId = self.message.reply_to_message.from_user.id
            else: userId = self.message_text[1]
            def callback(chatId, message):
                bot.send_message(chatId, JSON.dumps(message, ensure_ascii=False, indent=4))
            connection.send({"action": {"function": "get.data", "args": userId}}, self.message.chat.id, callback)
        connection.send({"action": {"function": "get.get", "args": [self.message.from_user.id, "isAdmin"]}}, self.message.chat.id, callback)
    def admin(self):
        def callback(chatId, value):
            if (value): bot.send_message(chatId, "–í—ã –∞–¥–º–∏–Ω")
            else: bot.send_message(chatId, "–í—ã –Ω–µ –∞–¥–º–∏–Ω")
        connection.send({"action": {"function": "get.get", "args": [self.message.from_user.id, "isAdmin"]}}, self.message.chat.id, callback)
    def removeId(self):
        def callback(chatId, value):
            if (not value): return
            if (len(self.message_text) < 2): return bot.send_message(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –¥—é–∑–µ—Ä <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
            if (self.message_text[1] == "_" and self.message.reply_to_message): user = self.message.reply_to_message.from_user.id
            else: user = self.message_text[1]
            def callback(chatId, value):
                if (value): return bot.send_message(chatId, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                connection.send({"action": {"function": "removeId", "args": user}}, chatId, lambda chatId: bot.send_message(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"))
            connection.send({"action": {"function": "get.get", "args": [user, "isAdmin"]}}, chatId, callback)
        connection.send({"action": {"function": "get.get", "args": [self.message.from_user.id, "isAdmin"]}}, self.message.chat.id, callback)
    def userslist(self):
        def callback(chatId, text):
            bot.send_message(chatId, text)
        connection.send({"action": {"function": "kmd.getIds", "args": self.message.from_user.id}}, self.message.chat.id, callback)
    def btcBet(self):
        if (len(self.message_text) < 3): return bot.send_message(self.message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –±–∏—Ç <—Å—Ç–∞–≤–∫–∞> –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑")
        amount = self.message_text[1]
        bet = self.message_text[2]
        connection.send({"action": {"function": "game.btcBet", "args": [connection.CLIENT, self.message.chat.id, self.message.from_user.id, amount, bet]}}, self.message.chat.id)
    def commandsList(self):
        connection.send({"action": {"function": "kmd.commandsList", "args": self.message.from_user.id}}, self.message.chat.id, lambda chatId, message: bot.send_message(chatId, message))

class Keyboards:
    def upgrade(sec, click, sale, balanceBoost):
        keyboard = ReplyKeyboardMarkup(True)
        button_sec = KeyboardButton(f"+—Å–µ–∫ ({sec} –ö–®)")
        button_click = KeyboardButton(f"+–∫–ª–∏–∫ ({click} –ö–®)")
        button_sale = KeyboardButton(sale)
        button_balanceBoost = KeyboardButton(balanceBoost)
        button_back = KeyboardButton("–ù–∞–∑–∞–¥")
        keyboard.add(button_sec, button_click)
        keyboard.add(button_sale, button_balanceBoost)
        keyboard.add(button_back)
        return keyboard
    def mainMenu():
        keyboard = ReplyKeyboardMarkup()
        button_click = KeyboardButton("üîÆ")
        button_upgrades = KeyboardButton("–ê–ø–≥—Ä–µ–π–¥—ã")
        button_balance = KeyboardButton("–ë–∞–ª–∞–Ω—Å")
        button_reset = KeyboardButton("–°–±—Ä–æ—Å")
        keyboard.add(button_click)
        keyboard.add(button_upgrades, button_balance)
        keyboard.add(button_reset)
        return keyboard

if __name__ == "__main__":
    ws = websocket.WebSocketApp("ws://127.0.0.1:3200/?client={}".format(connection.CLIENT),
                on_open=connection.on_open,
                on_message=connection.receiver,
                on_error=connection.on_error,
                on_close=connection.on_close)
    Thread(target=ws.run_forever).start()
    bot.polling(True, interval=0.5, timeout=123, long_polling_timeout=123)